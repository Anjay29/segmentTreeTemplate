#include <bits/stdc++.h>
using namespace std;

class segTree
{
    vector<int> seg;

public:
    segTree(int n)
    {
        seg.resize(4 * n + 1);
    }
    void build(int ind, int low, int high, int a[])
    {
        if (low == high)
        {
            seg[ind] = a[low];
            return;
        }
        int mid = (low + high) / 2;
        build(2 * ind + 1, low, mid, a);
        build(2 * ind + 2, mid + 1, high, a);
        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);
        return;
    }

    int query(int ind, int low, int high, int l, int r)
    {
        // segment's interval completely lies in low and high
        if (low >= l && high <= r)
        {
            return seg[ind];
        }

        // segment's interval lies outside of low and high
        if (low > r || high < l)
        {
            return INT_MIN;
        }

        // segment's interval overlap
        int mid = (low + high) / 2;
        int left = query(2 * ind + 1, low, mid, l, r);
        int right = query(2 * ind + 2, mid + 1, high, l, r);

        return max(left, right);
    }

    void update(int ind, int low, int high, int i, int val)
    {

        if (low == high)
        {
            seg[ind] = val;
            return;
        }

        int mid = (low + high) / 2;
        if (i <= mid)
        {
            update(2 * ind + 1, low, mid, i, val);
        }
        else
        {
            update(2 * ind + 2, mid + 1, high, i, val);
        }

        seg[ind] = max(seg[2 * ind + 1], seg[2 * ind + 2]);

        return;
    }
};

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int n;
    cin >> n;
    int a[n];
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }

    segTree s1(n);
    s1.build(0, 0, n - 1, a);

    int no_querey;
    cin >> no_querey;
    while (no_querey--)
    {
        int q_type;
        cin >> q_type;
        if (q_type == 1)
        {

            int l, r;
            cin >> l >> r;
            cout << s1.query(0, 0, n - 1, l, r) << " ";
        }
        else
        {
            int i, val;
            cin >> i >> val;
            s1.update(0, 0, n - 1, i, val);
            a[i] = val;
        }
    }

    return 0;
}
